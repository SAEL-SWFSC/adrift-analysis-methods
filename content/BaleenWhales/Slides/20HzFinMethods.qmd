---
title: "Semi-Automated Approach to Detecting 20Hz Fin Whale Pulses"
author: "Cory Hom-Weaver"
format: 
  revealjs:
    slide-number: true
    footer: "[Back to Methods](https://sael-swfsc.github.io/adrift-analysis-methods/content/BaleenWhales/Overview.html#fin-20-hz-adrift)" #This should link to your methods page
    theme: black
editor: visual
---

## Detecting 20Hz fin pulses in PAMGuard {.smaller}

-   Currently we are using PAMGuard version 2.02.09.
-   We used the click detector to identify fin pulses and classify them at 20Hz "clicks"

## Step 1: Open PAMGuard {.smaller}

::: columns
::: {.column width="30%"}
-   Open PAMgaurd and navigate to the [settings file](https://github.com/SAEL-SWFSC/adrift-analysis-methods/tree/main/content/BaleenWhales/Pamguard%20Settings) that has "FinClick" in the name
:::

::: {.column width="70%"}
![](images/Pamguard_Open.JPG)
:::
:::

## Step 2: Change output settings for your Drift {.smaller}

-   Load a new database with the following naming structure

    -   *ADRIFT\_###\_PG_2_02_09_FinClick.sqlite3*

-   Setup a new Binary files folder

    -   We want each Drift to have it's own Binary files

## Step 3: Update the Array File {.smaller}

::: columns
::: {.column width="30%"}
-   Open Hydrophone array settings

    -   Modify settings to match deployment details for the specific array used for your drift
:::

::: {.column width="70%"}
![](/content/Slides/images/Array_File_PG.JPG){fig-align="right"}
:::
:::

## Step 4: Decimator Settings {.smaller}

-   Check to see that your decimator settings match the settings below

::: columns
::: {.column width="40%"}
![](/content/Slides/images/200Hz_Decimator.JPG){fig-align="left"}
:::

::: {.column width="60%"}
![](/content/Slides/images/Decimator_filter_settings.JPG){fig-align="right"}
:::
:::

## Step 5: Sound Acquisition {.smaller}

::: columns
::: {.column width="60%"}
-   Navigate to your sound files

    -   We used 12kHz files, which were previously decimated in Triton Software

-   Due to an offset at the beginning of the SoundTrap wav files, we need to make sure to skip the initial 3 seconds of the recording

-   Your settings should look like the following below
:::

::: {.column width="40%"}
![](/content/Slides/images/Sound_Aquistion_Fin.JPG){fig-align="center"}
:::
:::

## Step 6: Check the Digital Pre and Trigger filter Settings {.smaller}

::: columns
::: {.column width="50%"}
![Digital Pre Filter Settings](/content/Slides/images/Click_Detector_PreFilter_Fin.JPG){fig-align="center"}
:::

::: {.column width="50%"}
![Digital Trigger Filter Settings](/content/Slides/images/Click_Detector_TrigerFilter_Fin.JPG){fig-align="center"}
:::
:::

## Step 7: Check the Click Detector Settings {.smaller}

-The settings for the first three tabs should be as follows. The rest of the tabs can be left to their default

::: columns
::: {.column width="33%"}
![Click Detector Source](/content/Slides/images/Click_Detector_DetectionParms_Source.JPG){fig-align="center"}
:::

::: {.column width="33%"}
![Click Detector Trigger](/content/Slides/images/Click_Detector_DetectionParms_Trigger.JPG){fig-align="center"}
:::

::: {.column width="33%"}
![Click Detector Click Length](/content/Slides/images/Click_Detector_DetectionParms_ClickLength.JPG){fig-align="center"}
:::
:::

## Step 8: Process each Drift {.smaller}

::: columns
::: {.column width="30%"}
-   Click the play button and let your wav files run through PAMGuard

    -   20Hz Fin Pulses should have Wigner Plots that are down swept
    -   Peak frequency will be close to 20-25Hz with some variability
:::

::: {.column width="70%"}
![](/content/Slides/images/Fin_Clicks_ClickDetector.JPG){fig-align="center"}
:::
:::

## Step 9: Create Events in PAMpal {.smaller}

-The code below can be used to subsample 20% of the data. We used a stratified sub-sampling method that looks at 1 out of every 5 wav files. Before running this code, create a copy of the original database and place it in a new folder so that we don't write over the originals.

```{r}
#| eval: FALSE
#| echo: true
# PAMpal simple example 
# install.packages('PAMpal')
# updated 22-12-6 to include loop for PG event adding w/PAMmisc
# UPDATE 2023-09-06:
#   Changed first processing from mode='recording' because there were
#   DST-related bugs on some drifts. Lines 45-48 updated.

rm(list=ls())
devtools::install_github('TaikiSan21/PAMpal')
devtools::install_github('TaikiSan21/PAMmisc')
library(PAMpal)
library(PAMmisc)

# Start by creating a "PAMpalSettings" object. This keeps track of what data
# you want to process and what processing you want to apply to it.

# Change paths below to your DB and binary folder. Can just be the 
# highest level binary folder for that drift - it will add all files
# within that folder recursively through subfolders.

# This will also ask you to type in some parameters for calculations
# in your console. You can just hit ENTER to accept defaults for all
# of these, they aren't relevant to the GPL calculations only for clicks.

pps <- PAMpalSettings(db = 'H:/DATA/PAMGUARD_FIN_CLICK/AddFinEvent/ADRIFT_053_PG_2_02_02_FinClick.sqlite3',
                      binaries = 'H:/DATA/PAMGUARD_FIN_CLICK/FinClickDetector_Run/Binaries/ADRIFT_053',
                      # these parameters are only for the click detector - can ignore
                      sr_hz=200,
                      filterfrom_khz=0,
                      filterto_khz=NULL,
                      winLen_sec=1)

# Now tell it to process your data. Id is optional and serves no function,
# but can be useful to tell data apart at a later point in time. Here
# mode = 'recording' tells it how to organize your data. Most of the time
# we are working with data that have been marked manually into events, 
# so PAMpal wants to organize things into events. mode='db' uses the events
# in the database, and only processes the detectoins you've marked out.
# In this case we just want to process everything, which is what 
# mode='recording' does. It will group them into events by recording file. 

# This might take some time

# to read in events after processing in order to get the tim
#data <- processPgDetections(pps, mode='db', id='Humpback007') 
wavFolder <- 'H:/RECORDINGS/12kHz/ADRIFT_053_CENSOR_12kHz'
wavGroups <- PAMpal:::mapWavFolder(wavFolder)
wavGroups$id <- basename(wavGroups$file)
data <- processPgDetections(pps, mode='time', grouping=wavGroups, id='Fin_ADRIFT_53')
# data <- processPgDetections(pps, mode='recording', id='Fin_ADRIFT_53')

# And here's how you can get the detections information out of "data"
# as a dataframe. Time column is "UTC", other columns are stuff it
# measured. 
clickDf <- getClickData(data)

# Now we can add the wav files to this data. You might get a warning about
# "startSample", its safe to ignore that.
data <- addRecordings(data, folder=wavFolder)

# that data is stored here as a dataframe. Has "start" & "end" as POSIXct and
# the fulle path to the file as "file"
wavDf <- files(data)$recordings
# add number of detections to this
nDets <- sapply(events(data), nDetections)
nDets <- data.frame(join=names(nDets), nDets=nDets)
wavDf$join <- basename(wavDf$file)
wavDf <- left_join(wavDf, nDets)
wavDf$join <- NULL
wavDf$nDets[is.na(wavDf$nDets)] <- 0

nfiles =round(nrow(wavDf)*.2)
randStart =sample(1:5,1)

wavDf=wavDf[round(seq(randStart, nrow(wavDf), length.out = nfiles)),]




# If we care about assigning some kind of initial label to these
# detections. Otherwise ignore. 
data <- setSpecies(data, method='manual', value='fin_click')

# Add events from wavDf loop
for(e in 1:nrow(wavDf)) {
  thisEv <- data[[basename(wavDf$file[e])]]
  # this will get all detector types, if just one type is wanted can
  # be simplified to ex. uids <- unique(getGPLData(thisEv)$UID)
  uids <- unique(unlist(lapply(getDetectorData(thisEv), function(x) {
    if(is.null(x)) return(NULL)
    x$UID
  })))
  
  addPgEvent(db = files(thisEv)$db,
             binary = files(thisEv)$binaries,
             eventType = species(thisEv)$id,
             UIDs = uids,
             type = 'click',
             start = wavDf$start[e],
             end = wavDf$end[e],
             comment = paste0('Added by PAMpal, event ID: ', id(thisEv)))
}

```

## Step 10: Open the Database in Viewer Mode {.smaller}

::: columns
::: {.column width="40%"}
-   Open the database that you have added events to with PAMGuard Viewer Mode

    -   Use the original binary files

-   Check to see that your events were added correctly under Click Detection--\>Show events
:::

::: {.column width="60%"}
![Events added through PAMpal](/content/Slides/images/Events_PG.JPG){fig-align="center"}
:::
:::

## Step 11: Add Spectrogram Annotation Moduel {.smaller}

::: columns
::: {.column width="40%"}
-   Open the database that you have added events to with PAMGuard Viewer Mode

    -   Use the original binary files

-   Add the "Spectrogram Annotation Moduel"

-   Once added you should see "Spectrogram Annotation Settings" under the settings menu
:::

::: {.column width="60%"}
![](/content/Slides/images/Spectrogram_Annotation_Settings.JPG){fig-align="center"}
:::
:::

## Step 12: Add LOOKUP Table {.smaller}

::: columns
::: {.column width="40%"}
-   Click on the gear icon for the "User Form Annotation" check box

-   Click on "Create New"

    -   A new dialog will pop up and under the left side you will Add a LOOKUP table

    -   Fill in the metadata for the table as follows
:::

::: {.column width="60%"}
![](/content/Slides/images/Create_Logger_Form_Fin-Annotations.JPG){fig-align="center"}
:::
:::

## Step 13: Add drop down list for LOOKUP table {.smaller}

::: columns
::: {.column width="40%"}
-   Right click on the drop down menu to the right of the Topic section

-   Click on edit list

    -   Add the following 4 options as seen in the image to the right
    -   Click ok on all of the promts
    -   In order for your settings to work you will need to save and restart PAMGaurd
:::

::: {.column width="60%"}
![](/content/Slides/images/LookUp_Table_Fin_Annotations.JPG){fig-align="center"}
:::
:::

## Step 14: Make a Copy of the Events Database {.smaller}

-   We will be comparing the Original Events Database with the Validated Database to pull out metrics such as false positives, false negatives, true positives, true negative and precision and recall

    -   This is why we need to validate a copy of the events database and keep one untouched

## Step 15: Start Validating Events {.smaller}

-   Use the Click Detector Event List to Navigate to each event
    -   Use the click detector to add or remove clicks to an event
        -   Use the Wigner and the click spectrum to determine if the click is a 20Hz fin pulse
        -   Look at the spectrogram and see if the click looks like a 20Hz fin pulse

::: columns
::: {.column width="50%"}
![Fin pulses in the click detector. Click spectrum shows a peak around 20Hz. The wigner shows a slight down sweep.](/content/Slides/images/Fin_Clicks_Good_Wigner.JPG){fig-align="center"}
:::

::: {.column width="50%"}
![20Hz Fin Pulses (purple triangles represent where the click detector has picked up a pulse)](/content/Slides/images/20Hz_Fin_Spectrogram.JPG){fig-align="center"}
:::
:::

## Step 16: Annotate Missed Fin Pulses on the Spectrogram Display {.smaller}

::: columns
::: {.column width="40%"}
-   Scroll through each event using the spectrogram display
    -   Annotate any 20Hz pulse that was missed by the click detector
    -   Draw a box around the click and use the drop down menu to select the sound you're boxing
:::

::: {.column width="60%"}
![Spectrogram Annotation](/content/Slides/images/Fin_click_annotation_spectrogram.JPG){fig-align="center"}
:::
:::

## Step 17: Compare original event database with the validated events database {.smaller}

-   We then compared the original and validated databases to understand our detector performance.

    -   The detector was tuned to over detect clicks as we wanted to make sure to pick up all of the 20Hz fin pulses. That being said, most of recordings were pretty noisy under 50Hz and the click detector picked up on a lot of false positives

## Step 18: Create a Random Forest Model from the validated data {.smaller}

-   Taiki Sakai created a model to use for the classification of 20Hz fin whale pulses based off of the previously validated data. The model and all of the data used can be found on his [GitHub site here.](https://github.com/TaikiSan21/Fin_RF)

-   We used the model to predict if fin whales were present on an hourly basis on all of our data. While we understand that there were limitations to this model, we felt confident using based off of the following criteria.

    -   The model had one of three results: Accepted, Review, Dropped

        -   Accepted: 3 or more predictions and a score of 0.85 or higher

        -   Review: 3 or more predictions and a score of 0.5 to 0.84

        -   Dropped: less than 3 predictions and a score of greater than 0.5

    -   Both Accepted and Review detections were reviewed for accuracy

## Step 19: Validate Predictions {.smaller}

-   Using Taiki's [finProcessReivewScript.R](https://github.com/TaikiSan21/Fin_RF/blob/main/finProcessReviewScript.R) we can quickly review all "Accepted" and "Review" hours.
    -   We would track our progress using a ".CSV". Under the manualReivew column we entered Fin or NotFin for that hour based off of the spectrogram images.

::: columns
::: {.column width="50%"}
![Spectrogram of 2 min clips. Red circles are predictions](/content/Slides/images/ModelReview_Spectrogram.JPG){fig-align="left" width="311"}
:::

::: {.column width="50%"}
![CSV to keep track of review. NAs were dropped by the model](/content/Slides/images/RF_Review_CSV.JPG){fig-align="left" width="258"}
:::
:::

## Step 20: Combine all data for plotting {.smaller}

-   From here we gave all .CSVs to Taiki to integrate into the final report plots.
